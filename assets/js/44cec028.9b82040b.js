"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7260],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),o=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=o(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=o(n),d=a,f=m["".concat(u,".").concat(d)]||m[d]||c[d]||s;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var o=2;o<s;o++)l[o]=n[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},34509:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return o},toc:function(){return p},default:function(){return m}});var r=n(87462),a=n(63366),s=(n(67294),n(3905)),l=["components"],i={sidebar_position:5,sidebar_label:"Arkitekt \u2764\ufe0f Fluss"},u="Arkitekt \u2764\ufe0f Fluss",o={unversionedId:"fluss",id:"fluss",title:"Arkitekt \u2764\ufe0f Fluss",description:"What is Fluss?",source:"@site/docs/fluss.md",sourceDirName:".",slug:"/fluss",permalink:"/arkitekt/docs/fluss",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fluss.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"Arkitekt \u2764\ufe0f Fluss"},sidebar:"tutorialSidebar",previous:{title:"Renewed Reservation",permalink:"/arkitekt/docs/protocol/reserve/active_app/provided_before/reservation"},next:{title:"arkitekt",permalink:"/arkitekt/docs/reference/arkitekt"}},p=[{value:"What is Fluss?",id:"what-is-fluss",children:[],level:3},{value:"Design",id:"design",children:[],level:3}],c={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,s.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"arkitekt-\ufe0f-fluss"},"Arkitekt \u2764\ufe0f Fluss"),(0,s.kt)("h3",{id:"what-is-fluss"},"What is Fluss?"),(0,s.kt)("p",null,"Fluss is a reactive task scheduler for the arkitekt framework. While arkitekt takes care of discovering\nand calling your apps in a reliable and reusable manner. Fluss plays a role in orchestrating these tasks"),(0,s.kt)("h3",{id:"design"},"Design"),(0,s.kt)("p",null,"Fluss enables you to construct workflows in a graphical manner like the one below, utilizing nodes that you\ndefine within arkitekt"),(0,s.kt)("p",null,"Consider this query"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="/graphql/get_capsules.graphql"',title:'"/graphql/get_capsules.graphql"'},"query get_capsules {\n  capsules {\n    id\n    missions {\n      flight\n      name\n    }\n  }\n}\n")),(0,s.kt)("p",null,"On running (in your terminal)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"turms gen\n")),(0,s.kt)("p",null,"Turms generates automatically this pydantic schema for you"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="/schema/api.py"',title:'"/schema/api.py"'},'\nclass Get_capsulesQueryCapsulesMissions(GraphQLObject):\n    typename: Optional[Literal["CapsuleMission"]] = Field(alias="__typename")\n    flight: Optional[int]\n    name: Optional[str]\n\n\nclass Get_capsulesQueryCapsules(GraphQLObject):\n    typename: Optional[Literal["Capsule"]] = Field(alias="__typename")\n    id: Optional[str]\n    missions: Optional[List[Optional[Get_capsulesQueryCapsulesMissions]]]\n\n\nclass Get_capsulesQuery(GraphQLQuery):\n    capsules: Optional[List[Optional[Get_capsulesQueryCapsules]]]\n\n    class Meta:\n        domain = "default"\n        document = "query get_capsules {\\n  capsules {\\n    id\\n    missions {\\n      flight\\n      name\\n    }\\n  }\\n}"\n\n')),(0,s.kt)("p",null,"Which you can than use easily in your rath code"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"from rath import Rath\nfrom schema.api import Get_capsulesQuery\n\nrath = Rath(...)\n\ntyped_answer = GetcapuslesQuery(**rath.execute(GetcapuslesQuery.Meta.document).data) # fully tpyed\n\n")),(0,s.kt)("p",null,"Also when using the Turms Operation Func plugin the turms generated\nautomatically registers fully typed utilify functions:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="/schema/api.py"',title:'"/schema/api.py"'},'def get_capsules() -> List[Get_capsulesQueryCapsules]:\n    """get_capsules\n\n\n\n    Arguments:\n\n    Returns:\n        Get_capsulesQueryCapsules: The returned Mutation"""\n    return Get_capsulesQuery.execute({}).capsules\n\n')),(0,s.kt)("p",null,"Isn't this lovely?"))}m.isMDXComponent=!0}}]);