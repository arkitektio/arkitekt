"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7643],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=u(n),d=i,m=f["".concat(s,".").concat(d)]||f[d]||p[d]||o;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},91541:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return f}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a=["components"],l={sidebar_label:"registry",title:"definition.registry"},s=void 0,u={unversionedId:"reference/definition/registry",id:"reference/definition/registry",title:"definition.registry",description:"register",source:"@site/docs/reference/definition/registry.md",sourceDirName:"reference/definition",slug:"/reference/definition/registry",permalink:"/arkitekt/docs/reference/definition/registry",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/definition/registry.md",tags:[],version:"current",frontMatter:{sidebar_label:"registry",title:"definition.registry"},sidebar:"tutorialSidebar",previous:{title:"nodeify",permalink:"/arkitekt/docs/reference/definition/nodeify"},next:{title:"arkitekt",permalink:"/arkitekt/docs/reference/fakts/arkitekt"}},c=[{value:"register",id:"register",children:[],level:4}],p={toc:c};function f(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"register"},"register"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def register(widgets: Dict[str, WidgetInput] = {}, interfaces: List[str] = [], on_provide=None, on_unprovide=None, definition_registry: DefinitionRegistry = None, structure_registry: StructureRegistry = None, **params)\n")),(0,o.kt)("p",null,"Take a function and register it as a node."),(0,o.kt)("p",null,"This function is used to register a node. Use it as a decorator. You can specify\nspecific widgets for every paramer in a dictionary {argument_key: widget}. By default\nthis function will use the default defintion registry to store the nodes inputdata.\nThis definition registry will then be used by an agent to create, and provide the node."),(0,o.kt)("p",null,"If your function has specific inputs that need custom rules for expansion and shrinking\n, you can pass a structure registry to the function. This registry will then be used."),(0,o.kt)("p",null,"This decorator is non intrusive. You can still call this function as a normal function from\nyour code"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"widgets")," ",(0,o.kt)("em",{parentName:"li"},"Dict","[str, WidgetInput]",", optional")," - ",(0,o.kt)("em",{parentName:"li"},"description"),". Defaults to {}."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"interfaces")," ",(0,o.kt)("em",{parentName:"li"},"List","[str]",", optional")," - ",(0,o.kt)("em",{parentName:"li"},"description"),". Defaults to []."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"on_provide")," _",(0,o.kt)("em",{parentName:"li"},"type"),", optional",(0,o.kt)("em",{parentName:"li"}," - _description"),". Defaults to None."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"on_unprovide")," _",(0,o.kt)("em",{parentName:"li"},"type"),", optional",(0,o.kt)("em",{parentName:"li"}," - _description"),". Defaults to None."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"definition_registry")," ",(0,o.kt)("em",{parentName:"li"},"DefinitionRegistry, optional")," - ",(0,o.kt)("em",{parentName:"li"},"description"),". Defaults to None."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"structure_registry")," ",(0,o.kt)("em",{parentName:"li"},"StructureRegistry, optional")," - ",(0,o.kt)("em",{parentName:"li"},"description"),". Defaults to None.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Callable")," - A wrapped function that just returns the original function.")))}f.isMDXComponent=!0}}]);