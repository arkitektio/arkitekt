"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4596],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(r),m=a,k=d["".concat(u,".").concat(m)]||d[m]||c[m]||i;return r?n.createElement(k,o(o({ref:t},p),{},{components:r})):n.createElement(k,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},71362:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var n=r(87462),a=r(63366),i=(r(67294),r(3905)),o=["components"],s={sidebar_label:"postman",title:"structures.serialization.postman"},u=void 0,l={unversionedId:"reference/structures/serialization/postman",id:"reference/structures/serialization/postman",title:"structures.serialization.postman",description:"shrink\\_inputs",source:"@site/docs/reference/structures/serialization/postman.md",sourceDirName:"reference/structures/serialization",slug:"/reference/structures/serialization/postman",permalink:"/arkitekt/docs/reference/structures/serialization/postman",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/structures/serialization/postman.md",tags:[],version:"current",frontMatter:{sidebar_label:"postman",title:"structures.serialization.postman"},sidebar:"tutorialSidebar",previous:{title:"actor",permalink:"/arkitekt/docs/reference/structures/serialization/actor"},next:{title:"node",permalink:"/arkitekt/docs/reference/traits/node"}},p=[{value:"shrink_inputs",id:"shrink_inputs",children:[],level:4},{value:"expand_outputs",id:"expand_outputs",children:[],level:4}],c={toc:p};function d(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"shrink_inputs"},"shrink","_","inputs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"async def shrink_inputs(node: NodeFragment, args: List[Any], kwargs: Dict[str, Any], structure_registry: StructureRegistry) -> List[Any]\n")),(0,i.kt)("p",null,"Shrinks args and kwargs"),(0,i.kt)("p",null,"Shrinks the inputs according to the Node Definition"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"node")," ",(0,i.kt)("em",{parentName:"li"},"Node")," - The Node")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Raises"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ShrinkingError")," - If args are not Shrinkable"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ShrinkingError")," - If kwargs are not Shrinkable")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("p",null,"  Tuple[List","[Any]",", Dict","[str, Any]","]: Parsed Args as a List, Parsed Kwargs as a dict"),(0,i.kt)("h4",{id:"expand_outputs"},"expand","_","outputs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"async def expand_outputs(node: NodeFragment, returns: List[Any], structure_registry: StructureRegistry) -> List[Any]\n")),(0,i.kt)("p",null,"Expands Returns"),(0,i.kt)("p",null,"Expands the Returns according to the Node definition"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"node")," ",(0,i.kt)("em",{parentName:"li"},"Node")," - Node definition"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"returns")," ",(0,i.kt)("em",{parentName:"li"},"List","[any]")," - The returns")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Raises"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ExpandingError")," - if they are not expandable")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"List[Any]")," - The Expanded Returns")))}d.isMDXComponent=!0}}]);