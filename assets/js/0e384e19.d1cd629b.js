(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9671],{59881:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return k},metadata:function(){return u},toc:function(){return d},default:function(){return c}});var i=r(87462),n=r(63366),a=(r(67294),r(3905)),s=r(93456),o=["components"],l={sidebar_position:1,sidebar_label:"Introduction"},k="Quick Start",u={unversionedId:"intro",id:"intro",title:"Quick Start",description:"Let's discover Arkitekt in less than 5 minutes.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/arkitekt/docs/intro",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Introduction"},sidebar:"tutorialSidebar",next:{title:"Transport",permalink:"/arkitekt/docs/transport"}},d=[{value:"Core Ideas",id:"core-ideas",children:[],level:3},{value:"The why?",id:"the-why",children:[],level:3},{value:"Inspiration",id:"inspiration",children:[{value:"Arkitekt vs Celery",id:"arkitekt-vs-celery",children:[],level:4}],level:3},{value:"Trust Issues",id:"trust-issues",children:[],level:3},{value:"Installation",id:"installation",children:[],level:3},{value:"Initilization",id:"initilization",children:[],level:2}],p={toc:d};function c(e){var t=e.components,r=(0,n.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"quick-start"},"Quick Start"),(0,a.kt)("p",null,"Let's discover ",(0,a.kt)("strong",{parentName:"p"},"Arkitekt in less than 5 minutes"),"."),(0,a.kt)("h3",{id:"core-ideas"},"Core Ideas"),(0,a.kt)("p",null,"Arkitekt tries to establish a protocol and implementation for the ",(0,a.kt)("strong",{parentName:"p"},"reliable distribution")," of tasks among ",(0,a.kt)("strong",{parentName:"p"},"unsteady")," workers."),(0,a.kt)("h3",{id:"the-why"},"The why?"),(0,a.kt)("p",null,"We developed arkitekt and the surrounding framework for our needs that arose in the context of\nscientific image processing. We set out to design a workflow orchestration tool that can span multiple\nimage analysis tools on multiple participating computers. As a integral part of this we needed a solution\nthe distribution of this tasks to the participating tools. This is arkitekt. It establishes an API for a remote procedure\ncall (RPC) interface that has the following features:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Workers are Clients"),": Workers are Clients (see Arkitekt vs other RPCs)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Workers are authenticated")," Workers are Applications in the OAuth sense, that means they authenticate by User and Scope"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Tasks are futures")," Focussing on async programming, tasks are fully featured Futures (Tasks), that means you can also cancel (on another computer)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Tasks are abstract")," Tasks can share the same logic (signature), but be implemented by different workers"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Tasks are distributed")," Tasks are automatically distributed amongst apps that share the same implementation")),(0,a.kt)("h3",{id:"inspiration"},"Inspiration"),(0,a.kt)("p",null,"Arkitekt tries to help in the automation of complex analysis pipelines. It is designed for task\ndistribution amongst ",(0,a.kt)("strong",{parentName:"p"},"untrusted")," and ",(0,a.kt)("strong",{parentName:"p"},"unsteady")," workes. What do we mean by this?"),(0,a.kt)("h4",{id:"arkitekt-vs-celery"},"Arkitekt vs Celery"),(0,a.kt)("p",null,"Arkitekt takes heavy inspiration from RPC Frameworks like Celery but has a completely different approach.\nWhereas Celery tries to offload tasks on workers in the background of a server. Arkitekt tries to schedule\nwork on the clients conneted to said worker."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Celery"),":"),(0,a.kt)(s.Mermaid,{chart:"flowchart LR;\n    id0(Client)--\x3e|Request|id2(Server)\n    id1(Client2)--\x3e|Request|id2(Server)\n    id2(Server)--\x3e|Task|id6(Worker)\n    id2(Server)--\x3e|Task|id3(Worker)\n    id2(Server)--\x3e|Task|id4(Worker)\n    id2(Server)--\x3e|Task|id5(Worker)",mdxType:"Mermaid"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arkitekt"),":"),(0,a.kt)(s.Mermaid,{chart:"flowchart LR;\n    id0(Client)--\x3e|Request|id10(Arkitekt)\n    id10(Arkitekt)--\x3e|Task|id0(Client)\n    id1(Client2)--\x3e|Request|id10(Arkitekt)\n    id10(Arkitekt)--\x3e|Task|id1(Client2)\n    id2(Client2)--\x3e|Request|id10(Arkitekt)\n    id10(Arkitekt)--\x3e|Task|id2(Client3)\n",mdxType:"Mermaid"}),(0,a.kt)("h3",{id:"trust-issues"},"Trust Issues"),(0,a.kt)("p",null,"With this sort of layout comes one essential problem.. ",(0,a.kt)("strong",{parentName:"p"},"Trust!")),(0,a.kt)("h3",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install rath\n")),(0,a.kt)("h2",{id:"initilization"},"Initilization"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from rath.links.aiohttp import AioHttpLink\n\nlink = AioHttpLink(url="https://api.spacex.land/graphql/")\n\n\nrath = Rath(link=link)\n\nquery = """query TestQuery {\n  capsules {\n    id\n    missions {\n      flight\n    }\n  }\n}\n"""\n\nresult = rath.execute(query)\n')))}c.isMDXComponent=!0},11748:function(e,t,r){var i={"./locale":89234,"./locale.js":89234};function n(e){var t=a(e);return r(t)}function a(e){if(!r.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}n.keys=function(){return Object.keys(i)},n.resolve=a,e.exports=n,n.id=11748}}]);