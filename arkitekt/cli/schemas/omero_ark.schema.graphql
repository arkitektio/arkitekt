"""Make string uppercase"""
directive @upper on FIELD

directive @replace(old: String!, new: String!) on FIELD

"""Make get stuff uppercase"""
directive @relation(on: String!) on FIELD

type Query {
  omeroUsers: [OmeroUser!]!
  projects(filters: ProjectFilter = null, pagination: OffsetPaginationInput = null): [Project!]!
  me: User!
  project(id: ID!): Project!
  image(id: ID!): Image!
  dataset(id: ID!): Dataset!
  datasets(filters: DatasetFilter = null, pagination: OffsetPaginationInput = null): Dataset!
  images(filters: ImageFilter = null, pagination: OffsetPaginationInput = null): Image!
}

type OmeroUser {
  id: ID!
  omeroPassword: String!
  omeroUsername: String!
  user: User!
}

type User {
  id: ID!
  sub: String!
  username: String!
  email: String!
  password: String!
  omeroUser: OmeroUser
}

type Project {
  id: String!
  name: String!
  tags: [String!]!
  description: String!
  datasets: [Dataset!]!
}

type Dataset {
  id: String!
  name: String!
  description: String!
  tags: [String!]!
  images: [Image!]!
}

type Image {
  name: String!
  description: String!
  tags: [String!]!
  id: String!
  acquisitionDate: DateTime
  originalFile: String
}

"""Date with time (isoformat)"""
scalar DateTime

input ProjectFilter {
  ids: [ID!] = null
  search: String = null
}

input OffsetPaginationInput {
  offset: Int! = 0
  limit: Int! = -1
}

input DatasetFilter {
  ids: [ID!] = null
  search: String = null
}

input ImageFilter {
  ids: [ID!] = null
  search: String = null
}

type Mutation {
  ensureOmeroUser(input: OmeroUserInput!): OmeroUser!
  deleteMe: User!
  createProject(input: CreateProjectInput!): Project!
}

input OmeroUserInput {
  username: String!
  password: String!
  host: String = "omeroserver"
  port: Int = 4064
}

input CreateProjectInput {
  name: String!
  description: String = null
}